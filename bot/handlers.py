from __future__ import annotations

import datetime
from contextlib import suppress
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, Message

from .config import Settings
from .database import User, db
from .keyboards import (
    admin_menu_keyboard,
    main_menu_keyboard,
    subscribe_keyboard,
    withdrawal_actions_keyboard,
)
from .middlewares import mask_sensitive

router = Router()


class WithdrawStates(StatesGroup):
    waiting_for_amount = State()


async def _ensure_user_record(
    telegram_id: int,
    settings: Settings,
    username: Optional[str],
    referred_by: Optional[int] = None,
) -> tuple[User, bool]:
    user = await db.get_user(telegram_id)
    created = False
    if user is None:
        await db.create_user(telegram_id, settings.start_bonus, referred_by, username)
        user = await db.get_user(telegram_id)
        created = True
    elif referred_by and user.referred_by is None and referred_by != telegram_id:
        await db.assign_referrer(telegram_id, referred_by)
        user.referred_by = referred_by

    if user is None:
        raise RuntimeError("Failed to ensure user record")

    if user.username != username:
        await db.update_username(telegram_id, username)
        user.username = username

    return user, created


async def ensure_user(message: Message, settings: Settings) -> User:
    user, _ = await _ensure_user_record(
        message.from_user.id,
        settings,
        message.from_user.username,
    )
    return user


async def _is_channel_member(bot: Bot, settings: Settings, telegram_id: int) -> bool:
    member = await bot.get_chat_member(settings.channel_username, telegram_id)
    return member.status in {
        ChatMemberStatus.MEMBER,
        ChatMemberStatus.ADMINISTRATOR,
        ChatMemberStatus.CREATOR,
    }


async def _activate_subscription(user: User, bot: Bot, settings: Settings) -> None:
    await db.set_subscription(user.telegram_id, True)
    user.is_subscribed = True
    if user.referred_by and not user.reward_claimed:
        await db.update_balance(user.referred_by, settings.referral_bonus)
        await db.mark_reward_claimed(user.telegram_id)
        user.reward_claimed = True

        referral_name = f"@{user.username}" if user.username else f"ID {user.telegram_id}"
        with suppress(TelegramBadRequest):
            await bot.send_message(
                user.referred_by,
                (
                    f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {referral_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. "
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {settings.referral_bonus} ‚≠ê."
                ),
            )


async def _verify_and_activate_subscription(
    bot: Bot, settings: Settings, user: User
) -> tuple[bool, bool]:
    is_member = await _is_channel_member(bot, settings, user.telegram_id)
    if not is_member:
        return False, False
    if not user.is_subscribed:
        await _activate_subscription(user, bot, settings)
        return True, True
    return True, False


async def ensure_subscription_access(
    message: Message, bot: Bot, settings: Settings, user: User
) -> bool:
    is_member, activated = await _verify_and_activate_subscription(bot, settings, user)
    if not is_member:
        await message.answer(
            "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.",
            reply_markup=subscribe_keyboard(settings.channel_username),
        )
        return False
    if activated:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
    return True


@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject, bot: Bot, settings: Settings) -> None:
    telegram_id = message.from_user.id
    args = command.args or ""
    referred_by: Optional[int] = None
    if args.startswith("ref") and args[3:].isdigit():
        referred_by = int(args[3:])
        if referred_by == telegram_id:
            referred_by = None

    user, created = await _ensure_user_record(
        telegram_id,
        settings,
        message.from_user.username,
        referred_by,
    )
    if created:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 ‚≠ê –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=main_menu_keyboard(),
        )
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=main_menu_keyboard())

    bot_info = await bot.get_me()
    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã!",
        reply_markup=subscribe_keyboard(settings.channel_username),
    )
    await message.answer(
        "–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{username}?start=ref{tg_id}".format(
            username=bot_info.username,
            tg_id=telegram_id,
        )
    )


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message, settings: Settings, bot: Bot) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        return
    await message.answer(f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {user.balance} ‚≠ê")


@router.message(F.text == "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def daily_bonus(message: Message, settings: Settings, bot: Bot) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        return
    now = datetime.datetime.utcnow()
    last_bonus = None
    if user.last_daily_bonus:
        last_bonus = datetime.datetime.fromisoformat(user.last_daily_bonus)

    if last_bonus and (now - last_bonus) < datetime.timedelta(hours=24):
        remaining = datetime.timedelta(hours=24) - (now - last_bonus)
        hours, remainder = divmod(int(remaining.total_seconds()), 3600)
        minutes = remainder // 60
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω."
        )
        return

    await db.update_balance(user.telegram_id, settings.daily_bonus)
    await db.set_last_daily_bonus(user.telegram_id, now.isoformat())
    await message.answer(
        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {settings.daily_bonus} ‚≠ê –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!"
    )


@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def referral_link(message: Message, bot: Bot, settings: Settings) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        return
    bot_info = await bot.get_me()
    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π: https://t.me/{username}?start=ref{tg_id}".format(
            username=bot_info.username,
            tg_id=user.telegram_id,
        )
    )


@router.message(F.text == "üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
async def top_referrers(message: Message, settings: Settings, bot: Bot) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        return
    top = await db.list_top_referrers()
    if not top:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return
    lines = ["–¢–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:"]
    for index, (telegram_id, total) in enumerate(top, start=1):
        masked = mask_sensitive(str(telegram_id))
        lines.append(f"{index}. {masked} ‚Äî {total} –¥—Ä—É–∑–µ–π")
    await message.answer("\n".join(lines))


@router.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_subscription(message: Message, bot: Bot, settings: Settings) -> None:
    user = await ensure_user(message, settings)
    is_member, activated = await _verify_and_activate_subscription(bot, settings, user)
    if not is_member:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.",
            reply_markup=subscribe_keyboard(settings.channel_username),
        )
        return

    if activated:
        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ù–∞–≥—Ä–∞–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
        if user.referred_by and user.reward_claimed:
            response += f" –í–∞—à–µ–º—É –¥—Ä—É–≥—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ {settings.referral_bonus} ‚≠ê –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
        await message.answer(response)
    else:
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(
    callback: CallbackQuery, bot: Bot, settings: Settings
) -> None:
    user, _ = await _ensure_user_record(
        callback.from_user.id,
        settings,
        callback.from_user.username,
    )
    is_member, activated = await _verify_and_activate_subscription(bot, settings, user)
    if not is_member:
        await callback.answer(
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            show_alert=True,
        )
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.",
            reply_markup=subscribe_keyboard(settings.channel_username),
        )
        return

    if activated:
        response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ù–∞–≥—Ä–∞–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."
        if user.referred_by and user.reward_claimed:
            response += f" –í–∞—à–µ–º—É –¥—Ä—É–≥—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ {settings.referral_bonus} ‚≠ê –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
    else:
        response = "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."

    await callback.message.answer(response)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")


@router.message(F.text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def withdrawal_request(message: Message, settings: Settings, bot: Bot, state: FSMContext) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        return
    referrals = await db.list_referrals(user.telegram_id)
    if referrals:
        invited_lines = [
            f"‚Ä¢ @{username}" if username else f"‚Ä¢ ID {ref_id}"
            for ref_id, username in referrals
        ]
        await message.answer(
            "–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è:\n" + "\n".join(invited_lines)
        )
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–∑–µ–π.")

    if user.balance < settings.min_withdrawal:
        await message.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {settings.min_withdrawal} ‚≠ê. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ {user.balance} ‚≠ê."
        )
        return
    await state.set_state(WithdrawStates.waiting_for_amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–µ –º–µ–Ω–µ–µ {minimum} ‚≠ê):".format(
            minimum=settings.min_withdrawal
        )
    )


@router.message(WithdrawStates.waiting_for_amount)
async def process_withdraw_amount(
    message: Message, settings: Settings, bot: Bot, state: FSMContext
) -> None:
    user = await ensure_user(message, settings)
    if not await ensure_subscription_access(message, bot, settings, user):
        await state.clear()
        return
    try:
        amount = int(message.text)
    except (TypeError, ValueError):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if amount < settings.min_withdrawal:
        await message.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {settings.min_withdrawal} ‚≠ê. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    if amount > user.balance:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return

    await db.update_balance(user.telegram_id, -amount)
    await db.add_withdrawal(user.telegram_id, amount)
    await state.clear()
    await message.answer(
        "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


@router.message(Command("admin"))
async def admin_panel(message: Message, settings: Settings) -> None:
    if message.chat.type != ChatType.PRIVATE:
        return
    if message.from_user.id not in settings.admin_ids:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu_keyboard())


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery, settings: Settings) -> None:
    if callback.from_user.id not in settings.admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    total_users = await db.count_users()
    total_balance = await db.sum_balances()
    await callback.message.edit_text(
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} ‚≠ê",
        reply_markup=admin_menu_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "admin_withdrawals")
async def admin_withdrawals(callback: CallbackQuery, settings: Settings) -> None:
    if callback.from_user.id not in settings.admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    requests = await db.list_withdrawals(status="pending")
    if not requests:
        await callback.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
        return
    for request in requests:
        await callback.message.answer(
            f"–ó–∞—è–≤–∫–∞ #{request.id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.telegram_id}\n–°—É–º–º–∞: {request.amount} ‚≠ê\n–°–æ–∑–¥–∞–Ω–∞: {request.created_at}",
            reply_markup=withdrawal_actions_keyboard(request.id),
        )
    await callback.answer()


async def _update_withdrawal_status(callback: CallbackQuery, status: str) -> None:
    _, raw_id = callback.data.split(":", 1)
    request_id = int(raw_id)
    await db.set_withdrawal_status(request_id, status)
    await callback.message.edit_text(
        callback.message.text + f"\n–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}",
    )
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.callback_query(F.data.startswith("withdraw_paid"))
async def withdrawal_paid(callback: CallbackQuery, settings: Settings) -> None:
    if callback.from_user.id not in settings.admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    await _update_withdrawal_status(callback, "paid")


@router.callback_query(F.data.startswith("withdraw_rejected"))
async def withdrawal_rejected(callback: CallbackQuery, settings: Settings) -> None:
    if callback.from_user.id not in settings.admin_ids:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    await _update_withdrawal_status(callback, "rejected")


@router.callback_query(F.data == "admin_regen_pin")
async def regen_pin(callback: CallbackQuery, settings: Settings) -> None:
    import secrets

    new_pin = secrets.token_hex(3)
    await callback.answer(f"–ù–æ–≤—ã–π –∑–∞—â–∏—Ç–Ω—ã–π PIN: {new_pin}", show_alert=True)
    await callback.message.edit_text(
        "PIN –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.",
        reply_markup=admin_menu_keyboard(),
    )


def register_handlers(dp: Dispatcher) -> None:
    dp.include_router(router)
